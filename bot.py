import logging
import random
import asyncio
import aiohttp
import gspread
import base64
import json
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import os
from datetime import datetime

TOKEN = os.getenv("TOKEN")  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
CREDENTIALS_BASE64 = os.getenv("CREDENTIALS_BASE64")  # –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # URL —Ö–æ—Å—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")  # ID Google —Ç–∞–±–ª–∏—Ü—ã
SHEET_ID_1 = os.getenv("SHEET_ID_1")  # ID –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
USER_SHEET = os.getenv("USER_SHEET")  # ID –ª–∏—Å—Ç–∞ –¥–ª—è —É—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ADMINS_SHEET = os.getenv("ADMINS_SHEET")  # ID –ª–∏—Å—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH
PING_URL = WEBHOOK_HOST

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()

user_data = {}
admin_ids = []  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def get_questions_from_google_sheets() -> list[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ Google Sheets –∏—Å–ø–æ–ª—å–∑—É—è —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    
    Returns:
        list[str]: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    """
    if not CREDENTIALS_BASE64:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è CREDENTIALS_BASE64 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    if not SPREADSHEET_ID:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è SPREADSHEET_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ base64
    credentials_json = base64.b64decode(CREDENTIALS_BASE64).decode()
    credentials_dict = json.loads(credentials_json)
    
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
    client = gspread.authorize(creds)

    spreadsheet = client.open_by_key(SPREADSHEET_ID)
    sheet = spreadsheet.get_worksheet_by_id(int(SHEET_ID_1))  # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç –ø–æ –µ–≥–æ ID
    questions = sheet.col_values(1)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    return questions

def get_google_sheets_client():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets.
    
    Returns:
        gspread.Client: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
    """
    if not CREDENTIALS_BASE64:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è CREDENTIALS_BASE64 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ base64
    credentials_json = base64.b64decode(CREDENTIALS_BASE64).decode()
    credentials_dict = json.loads(credentials_json)
    
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
    return gspread.authorize(creds)

def load_admin_ids():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ Google Sheets.
    
    Returns:
        list[str]: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    if not SPREADSHEET_ID or not ADMINS_SHEET:
        logging.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã SPREADSHEET_ID –∏–ª–∏ ADMINS_SHEET")
        return []
    
    try:
        client = get_google_sheets_client()
        spreadsheet = client.open_by_key(SPREADSHEET_ID)
        admins_sheet = spreadsheet.get_worksheet_by_id(int(ADMINS_SHEET))
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        admin_ids_list = admins_sheet.col_values(1)
        
        # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if admin_ids_list and not admin_ids_list[0].isdigit():
            admin_ids_list = admin_ids_list[1:]
            
        return admin_ids_list
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        return []

def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏–Ω–∞—á–µ False
    """
    return str(user_id) in admin_ids

async def log_user_activity(user: types.User, action: str = "start"):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ Google Sheets.
    
    Args:
        user (types.User): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram
        action (str): –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "start")
    """
    if not SPREADSHEET_ID or not USER_SHEET:
        logging.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã SPREADSHEET_ID –∏–ª–∏ USER_SHEET")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
    asyncio.create_task(_log_user_to_sheets(user, action))

async def _log_user_to_sheets(user: types.User, action: str):
    """
    –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ Google Sheets.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ.
    """
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ run_in_executor
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, lambda: _update_user_sheet(user, action))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ: {e}")

def _update_user_sheet(user: types.User, action: str):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ run_in_executor.
    """
    try:
        client = get_google_sheets_client()
        spreadsheet = client.open_by_key(SPREADSHEET_ID)
        user_sheet = spreadsheet.get_worksheet_by_id(int(USER_SHEET))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ
        user_id = str(user.id)
        cell = user_sheet.find(user_id, in_column=1)
        
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        first_name = user.first_name or ""
        last_name = user.last_name or ""
        full_name = f"{first_name} {last_name}".strip()
        
        username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
        user_link = f"https://t.me/{user.username}" if user.username else f"tg://user?id={user.id}"
        
        if cell:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤ –∏ –∏–º—è
            row = cell.row
            count_cell = user_sheet.cell(row, 5)  # –¢–µ–ø–µ—Ä—å —Å—á–µ—Ç—á–∏–∫ –≤ 5-–π –∫–æ–ª–æ–Ω–∫–µ
            count = int(count_cell.value) if count_cell.value and count_cell.value.isdigit() else 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            user_sheet.update_cell(row, 2, full_name)
            
            if action == "start":
                count += 1
                user_sheet.update_cell(row, 5, count)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ 5-–π –∫–æ–ª–æ–Ω–∫–µ
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            user_sheet.append_row([
                user_id,           # 1. User ID
                full_name,         # 2. –ü–æ–ª–Ω–æ–µ –∏–º—è
                user_link,         # 3. –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                current_time,      # 4. –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                1 if action == "start" else 0  # 5. –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤
            ])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
QUESTIONS_POOL = get_questions_from_google_sheets()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_ids = load_admin_ids()

start_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")]
])

ask_question_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")]
])

next_question_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")]
])

logging.basicConfig(level=logging.INFO)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."""
    user_data[message.chat.id] = {
        "players": [],
        "questions": [],
        "question_counts": {},
        "waiting_for_players": False
    }
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await log_user_activity(message.from_user, "start")
    
    await message.answer("–ù–∞–º–∞—Å–∫–∞—Ä! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã ¬´–ê–Ω–∞–Ω–¥–∞ –ú–∞—Ä–≥–∞ ‚Äî —ç—Ç–æ —è!¬ª\n\n–ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –Ω–∞–∂–º–∏ <b>–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</b> üôÇ\n\n–ö–∞–∫ –∏–≥—Ä–∞—Ç—å, –ø—Ä–∞–≤–∏–ª–∞ ‚Äî /rules\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –∏–≥—Ä–µ‚Äî /about\n–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏ ‚Äî /cards\n–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –∏–≥—Ä—ã ‚Äî /donate", parse_mode="HTML", reply_markup=start_keyboard)

@dp.callback_query(lambda c: c.data == "start_game")
async def start_game(callback_query: types.CallbackQuery):
    """–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' –±–æ—Ç –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    chat_id = callback_query.message.chat.id
    user_data[chat_id]["waiting_for_players"] = True
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞–ø–∏—Å–∞–≤ <b>–∫–∞–∂–¥–æ–µ –∏–º—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏</b> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n\n<i>–í–∏–∫—Ä–∞–º–∞–¥–∏—Ç—å—è\n–Æ–¥–∏—Å—Ç—Ö–∏—Ä–∞\n–ê–ª–æ–∫\n–î—Ö–∞—Ä–º–∞–≥—É–ø—Ç–∞</i>", parse_mode="HTML")

@dp.message(lambda message: user_data.get(message.chat.id, {}).get("waiting_for_players", False))
async def process_players(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ '–∂–¥—ë—Ç –∏–≥—Ä–æ–∫–æ–≤'."""
    chat_id = message.chat.id
    players = message.text.split("\n")
    players = [p.strip() for p in players if p.strip()]

    if not players:
        await message.answer("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–º—è.")
        return

    user_data[chat_id]["players"] = players
    user_data[chat_id]["questions"] = random.sample(QUESTIONS_POOL, len(QUESTIONS_POOL))
    user_data[chat_id]["question_counts"] = {player: 0 for player in players}
    user_data[chat_id]["waiting_for_players"] = False

    players_text = ", ".join(players)
    await message.answer(
        f"–ù–∞—á–∏–Ω–∞–µ–º! –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä—ã: <i>{players_text}</i>\n\n–ù–∞–∂–º–∏—Ç–µ <b>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</b>.", parse_mode="HTML",
        reply_markup=ask_question_keyboard
    )

@dp.callback_query(lambda c: c.data == "ask_question")
async def ask_question(callback_query: types.CallbackQuery):
    """–í—ã–¥–∞—ë—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–≥—Ä–æ–∫—É."""
    chat_id = callback_query.message.chat.id
    data = user_data.get(chat_id)

    if not data or not data["players"]:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ —Å /start")
        return

    if not data["questions"]:
        await callback_query.message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–æ–ø—Ä–æ—Å—ã –∫–æ–Ω—á–∏–ª–∏—Å—å! üòä", reply_markup=start_keyboard)
        return

    min_questions = min(data["question_counts"].values())
    candidates = [player for player, count in data["question_counts"].items() if count == min_questions]
    player = random.choice(candidates)

    data["question_counts"][player] += 1
    question = data["questions"].pop(0)

    await callback_query.message.answer(f"–í–æ–ø—Ä–æ—Å –¥–ª—è –∏–≥—Ä–æ–∫–∞ <i>{player}</i>\n\n<b>{question}</b>", parse_mode="HTML", reply_markup=next_question_keyboard)

### üîπ –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
@dp.message(Command("rules"))
async def show_rules(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã."""
    await message.answer("üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã</b>\n\n–í–µ–¥—É—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç –≤ –º–µ–Ω—é <b>–ù–æ–≤–∞—è –∏–≥—Ä–∞</b>, –≤–≤–æ–¥–∏—Ç –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏ –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É <b>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</b>. –û–¥–Ω–æ–º—É –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –≤—ã–¥–∞—ë—Ç—Å—è –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å. –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤–µ–¥—É—â–∏–π –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É <b>–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å</b>, –∏ –∑–∞—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–≥—Ä—ã. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –∏ –∑–∞—á–∏—Ç—ã–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É <b>–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å</b>.\n\n<i><b>–ì–ª–∞–≤–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –∏–≥—Ä—ã:</b>\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—á–∞—é—â–µ–º—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è, –Ω–µ –ø–µ—Ä–µ–±–∏–≤–∞—è –µ–≥–æ –∏ –Ω–µ –¥–æ–ø–æ–ª–Ω—è—è –µ–≥–æ –æ—Ç–≤–µ—Ç —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º. –≠—Ç–æ –∏–≥—Ä–∞ ‚Äî –Ω–µ –¥–∏—Å–∫—É—Å—Å–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É, –º—ã –Ω–µ –æ–±—Å—É–∂–¥–∞–µ–º —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –∏–ª–∏ –≤–æ–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—á–∞—é—â–µ–º—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–µ–±—è, –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–∏—Ö –º—ã—Å–ª–µ–π –∏ —á—É–≤—Å—Ç–≤, –Ω–µ –¥–∞–≤–∞—è –∏–º –æ—Ü–µ–Ω–∫–∏.</i>\n–í–æ–ø—Ä–æ—Å—ã –≤—ã–¥–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ –∏ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –∏–≥—Ä—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è.\n\n–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–≥—Ä—ã —Ç–∞–∫ –∏–ª–∏ –∏–Ω–∞—á–µ —Å–≤—è–∑–∞–Ω—ã —Å –ê–ú, —Ç–æ –µ—Å—Ç—å, —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å, –∏—Å—Ö–æ–¥—è –∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å —á–ª–µ–Ω–∞–º–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –ì—É—Ä—É, –≤–ª–∏—è–Ω–∏–µ–º –ø—Ä–∞–∫—Ç–∏–∫ –ê–ú –Ω–∞ –∂–∏–∑–Ω—å –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –∏ —Ç.–ø.\n\n–ï—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç –ø—É—Å—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞, –∑–Ω–∞—á–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ª–∏–±–æ –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥.\n\n–ú–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ç—å –∫–∏—Ä—Ç–∞–Ω.", parse_mode="HTML")

@dp.message(Command("about"))
async def show_about(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ."""
    await message.answer("‚Ñπ <b>–û–± –∏–≥—Ä–µ</b>\n\n–ò–≥—Ä–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–∏—Ü, –∏–º–µ—é—â–∏—Ö –∏–Ω–∏—Ü–∏–∞—Ü–∏—é –≤ —Ç—Ä–∞–¥–∏—Ü–∏–∏ ¬´–ê–Ω–∞–Ω–¥–∞ –ú–∞—Ä–≥–∏¬ª, –ø–æ—Å–∫–æ–ª—å–∫—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∑–∫–æ—Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é. –ó–∞–¥–∞–≤–∞–µ–º—ã–µ –≤ –Ω–µ–π –≤–æ–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω–æ –∏—Å—Ç–æ–ª–∫–æ–≤–∞–Ω—ã –ª–∏—Ü–∞–º–∏, –Ω–µ –∏–º–µ—é—â–∏–º–∏ –ø–æ—Å–≤—è—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç—Ä–∞–¥–∏—Ü–∏—é.\n\n¬´–ê–Ω–∞–Ω–¥–∞ –ú–∞—Ä–≥–∞ ‚Äî —ç—Ç–æ —è!¬ª ‚Äî —ç—Ç–æ –∏–≥—Ä–∞, –Ω–∞—Ü–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ —Å–ø–ª–æ—á–µ–Ω–∏–µ, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞—Ä–≥–æ–≤, —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –¥–æ–≤–µ—Ä–∏—è –∏ –µ–¥–∏–Ω—Å—Ç–≤–∞. –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∏–≥—Ä—ã –º–æ–∂–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ, –Ω–∞–ª–∞–¥–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, —Å–Ω—è—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.\n\n–ò–≥—Ä–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è—Ö, —Ç—Ä–µ–Ω–∏–Ω–≥–∞—Ö –∏ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö, –∫–∞–∫ –ø—Ä–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ, —Ç–∞–∫ –∏ –≤ –≥—Ä—É–ø–ø–µ. –≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–∞—Ç—Å–∞–Ω–≥–∞, —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç—Ä–µ—Ñ–ª–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∂–∏–∑–Ω—å –≤ —Ç—Ä–∞–¥–∏—Ü–∏–∏, –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ—é —Ä–æ–ª—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ, —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞.", parse_mode="HTML")

@dp.message(Command("cards"))
async def show_cards(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö (—Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)."""
    await message.answer("–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, –º—ã –µ—â—ë –Ω–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏ üôÇ\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å —Å –¥–∏–∑–∞–π–Ω–æ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º @dasarath_bro", parse_mode="HTML")

@dp.message(Command("donate"))
async def show_donate(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–∞—Ç–∞—Ö."""
    await message.answer("üôè <b>–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å</b>\n\n–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –∏–≥—Ä—ã –º–æ–∂–Ω–æ:\n‚Äî –ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É –¢-–ë–∞–Ω–∫ <b>2200700942783597</b>\n‚Äî –ò–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ https://www.tinkoff.ru/rm/r_zPXLAjkOMT.psqSQuKezK/eHvLB70230. \n\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–∞—Ç—å —Å–µ—Ä–¥–µ—á–Ω—ã–π –Ω–∞–º–∞—Å–∫–∞—Ä @Jayashrii_jane", parse_mode="HTML")

async def update_questions_cache():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Google Sheets.
    
    Returns:
        list[str]: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    """
    global QUESTIONS_POOL
    try:
        new_questions = get_questions_from_google_sheets()
        QUESTIONS_POOL = new_questions
        return new_questions
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ—à–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return QUESTIONS_POOL

@dp.message(Command("update"))
async def update_questions_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update. –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Google Sheets.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """
    user_id = message.from_user.id
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    global admin_ids
    admin_ids = load_admin_ids()
    
    if not is_admin(user_id):
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /update –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∫–æ–º–∞–Ω–¥—É
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        status_message = await message.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –≤–æ–ø—Ä–æ—Å–æ–≤
        questions = await update_questions_cache()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await status_message.edit_text(f"‚úÖ –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤.")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /update: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

async def on_startup(bot: Bot):
    """–ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    await bot.set_webhook(WEBHOOK_URL)

async def keep_awake():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—ã–ø–∞–ª (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è Render)."""
    while True:
        await asyncio.sleep(600)
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(PING_URL) as response:
                    logging.info(f"Ping response: {response.status}")
            except Exception as e:
                logging.error(f"Ping error: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–æ–º."""
    await bot.set_webhook(WEBHOOK_URL)
    app = web.Application()
    webhook_requests_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 10000)
    await site.start()

    asyncio.create_task(keep_awake())
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
